{"remainingRequest":"/home/runner/work/CF3_232100_v2/CF3_232100_v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF3_232100_v2/CF3_232100_v2/src/views/Tema5.vue?vue&type=template&id=7407c8d2&lang=pug","dependencies":[{"path":"/home/runner/work/CF3_232100_v2/CF3_232100_v2/src/views/Tema5.vue","mtime":1734131771975},{"path":"/home/runner/work/CF3_232100_v2/CF3_232100_v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF3_232100_v2/CF3_232100_v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF3_232100_v2/CF3_232100_v2/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF3_232100_v2/CF3_232100_v2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF3_232100_v2/CF3_232100_v2/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF3_232100_v2/CF3_232100_v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF3_232100_v2/CF3_232100_v2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgLnRpdHVsby1wcmluY2lwYWxfX251bWVybwogICAgICAgIHNwYW4gNQogICAgICBoMSBIaWRyw6F1bGljYSB5IG5ldW3DoXRpY2EKCiAgICAucC00KHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiNFM0YwRDQ7Ym9yZGVyLXJhZGl1czo3cHg7Ym9yZGVyOjJweCAjM0JBOTM1IGRhc2hlZDsiIGRhdGEtYW9zPSJmYWRlLXVwIikKICAgICAgLnJvdwogICAgICAgIC5jb2wtbWQtYXV0by5kLW5vbmUuZC1tZC1ibG9jawogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWE1LzEuc3ZnIikKICAgICAgICAuY29sLW1kCiAgICAgICAgICBwLm1iLTAgTGEgaGlkcsOhdWxpY2EgeSBuZXVtw6F0aWNhIHNvbiBkb3MgcmFtYXMgZGUgbGEgYXV0b21hdGl6YWNpw7NuIGluZHVzdHJpYWwgcXVlIHNlIGJhc2FuIGVuIGVsIHVzbyBkZSBmbHVpZG9zIHBhcmEgdHJhbnNtaXRpciBlbmVyZ8OtYSB5IHJlYWxpemFyIHRyYWJham8gbWVjw6FuaWNvLiBMYSBoaWRyw6F1bGljYSBlbXBsZWEgbMOtcXVpZG9zLCBnZW5lcmFsbWVudGUgYWNlaXRlLCBwYXJhIGdlbmVyYXIgbW92aW1pZW50b3MgcHJlY2lzb3MgeSBkZSBncmFuIGZ1ZXJ6YSwgbWllbnRyYXMgcXVlIGxhIG5ldW3DoXRpY2EgdXRpbGl6YSBnYXNlcywgY29tw7pubWVudGUgYWlyZSBjb21wcmltaWRvLCBwYXJhIGxvZ3JhciBtb3ZpbWllbnRvcyByw6FwaWRvcyB5IGZsZXhpYmxlcy4gRXN0YXMgdGVjbm9sb2fDrWFzIHRpZW5lbiBhcGxpY2FjaW9uZXMgZGl2ZXJzYXMgZW4gbGEgaW5kdXN0cmlhLCBkZXNkZSBzaXN0ZW1hcyBkZSBlbGV2YWNpw7NuIHkgcHJlbnNhcyBoaWRyw6F1bGljYXMgaGFzdGEgaGVycmFtaWVudGFzIG5ldW3DoXRpY2FzIHkgc2lzdGVtYXMgZGUgdHJhbnNwb3J0ZS4gRXN0ZSBjYXDDrXR1bG8gcHJvcG9yY2lvbmEgdW5hIGludHJvZHVjY2nDs24gYSBsb3MgcHJpbmNpcGlvcyBmdW5kYW1lbnRhbGVzIGRlIGxhIGhpZHLDoXVsaWNhIHkgbmV1bcOhdGljYSwgZGV0YWxsYSBzdXMgY29tcG9uZW50ZXMgeSBleHBsb3JhIGFwbGljYWNpb25lcyBjb211bmVzIGVuIGxhIGF1dG9tYXRpemFjacOzbiBpbmR1c3RyaWFsLiBBZGVtw6FzLCBzZSBpbmNsdXllbiBhY3RpdmlkYWRlcyBwcsOhY3RpY2FzIHkgc2ltdWxhY2lvbmVzIHBhcmEgZXN0dWRpYW50ZXMgZW4gbW9kYWxpZGFkIHJlbW90YSwgcGVybWl0aWVuZG8gbGEgcHLDoWN0aWNhIHkgY29tcHJlbnNpw7NuIGRlIGVzdG9zIHNpc3RlbWFzLgoKICAgIFNlcGFyYWRvcgoKICAgIC5jb250XzRfMQogICAgICAudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAgIGgyI3RfNV8xIDUuMSBQcmluY2lwaW9zIGLDoXNpY29zIGRlIGhpZHLDoXVsaWNhIHkgbmV1bcOhdGljYQogICAgICAKICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgVGFudG8gbGEgaGlkcsOhdWxpY2EgY29tbyBsYSBuZXVtw6F0aWNhIHNlIGZ1bmRhbWVudGFuIGVuIGxvcyBwcmluY2lwaW9zIGRlIGxhIG1lY8OhbmljYSBkZSBmbHVpZG9zIHkgbGFzIGxleWVzIGbDrXNpY2FzIHF1ZSByaWdlbiBlbCBjb21wb3J0YW1pZW50byBkZSBsw61xdWlkb3MgeSBnYXNlcy4KCiAgICAgIC5yb3cubXQtNAogICAgICAgIC5jb2wtbGcoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgICAgQWNjb3JkaW9uUkVEKHRpcG89ImEiIGNsYXNlLXRhcmpldGE9InRhcmpldGEiKQogICAgICAgICAgICAucm93LmNvbC14bC0xMS5tLWF1dG8odGl0dWxvPSJQcmluY2lwaW8gZGUgUGFzY2FsIGVuIGhpZHLDoXVsaWNhIikKICAgICAgICAgICAgICBwIEVzdGUgcHJpbmNpcGlvIGVzdGFibGVjZSBxdWUgdW5hIHByZXNpw7NuIGVqZXJjaWRhIGVuIHVuIGZsdWlkbyBjb25maW5hZG8gc2UgdHJhbnNtaXRlIHVuaWZvcm1lbWVudGUgZW4gdG9kYXMgbGFzIGRpcmVjY2lvbmVzLiBFc3RlIGNvbmNlcHRvIGVzIGxhIGJhc2UgZGUgbG9zIHNpc3RlbWFzIGhpZHLDoXVsaWNvcywgcGVybWl0aWVuZG8gdHJhbnNtaXRpciBncmFuZGVzIGZ1ZXJ6YXMgYSB0cmF2w6lzIGRlIHBlcXVlw7FhcyBwcmVzaW9uZXMsIGxvIGN1YWwgZXMgaWRlYWwgZW4gcHJlbnNhcyB5IHNpc3RlbWFzIGRlIGVsZXZhY2nDs24uCiAgICAgICAgICAgIC5yb3cuY29sLXhsLTExLm0tYXV0byh0aXR1bG89IkxleSBkZSBCb3lsZSB5IExleSBkZSBDaGFybGVzIGVuIG5ldW3DoXRpY2EiKQogICAgICAgICAgICAgIHAgTGEgTGV5IGRlIEJveWxlIGVzdGFibGVjZSBxdWUsIGVuIHVuIGdhcyBhIHRlbXBlcmF0dXJhIGNvbnN0YW50ZSwgZWwgdm9sdW1lbiBlcyBpbnZlcnNhbWVudGUgcHJvcG9yY2lvbmFsIGEgbGEgcHJlc2nDs24uIExhIExleSBkZSBDaGFybGVzIGluZGljYSBxdWUgZWwgdm9sdW1lbiBkZSB1biBnYXMgZXMgZGlyZWN0YW1lbnRlIHByb3BvcmNpb25hbCBhIHN1IHRlbXBlcmF0dXJhLiBFc3RvcyBwcmluY2lwaW9zIGF5dWRhbiBhIGVudGVuZGVyIGPDs21vIHNlIGNvbXBvcnRhIGVsIGFpcmUgY29tcHJpbWlkbyBlbiBzaXN0ZW1hcyBuZXVtw6F0aWNvcyB5IGPDs21vIHNlIHB1ZWRlIGNvbnRyb2xhciBsYSBwcmVzacOzbiBwYXJhIHJlYWxpemFyIHRyYWJham8uCiAgICAgICAgICAgIC5yb3cuY29sLXhsLTExLm0tYXV0byh0aXR1bG89IlZlbnRhamFzIHkgbGltaXRhY2lvbmVzIikKICAgICAgICAgICAgICBwIExhIGhpZHLDoXVsaWNhIHBlcm1pdGUgb2J0ZW5lciBtb3ZpbWllbnRvcyBjb24gZ3JhbiBmdWVyemEgeSBwcmVjaXNpw7NuLCBwZXJvIHN1IG1hbnRlbmltaWVudG8gZXMgbcOhcyBjb21wbGVqbyBkZWJpZG8gYSBwb3NpYmxlcyBmdWdhcyBkZSBhY2VpdGUuIExhIG5ldW3DoXRpY2EgZXMgbcOhcyBzZW5jaWxsYSB5IGRlIGJham8gY29zdG8sIHBlcm8gZXMgbWVub3MgcHJlY2lzYSB5IHRpZW5lIGxpbWl0YWNpb25lcyBlbiBjdWFudG8gYSBsYSBmdWVyemEgcXVlIHB1ZWRlIGdlbmVyYXIuCiAgICAgICAgLmNvbC1sZy1hdXRvLmQtbm9uZS5kLWxnLWJsb2NrKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWE1LzIucG5nIikKCiAgICBTZXBhcmFkb3IKCiAgICAudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiN0XzVfMiA1LjIgQ29tcG9uZW50ZXMgZGUgbG9zIHNpc3RlbWFzIGhpZHLDoXVsaWNvcyB5IG5ldW3DoXRpY29zCiAgICAKICAgIC5yb3cKICAgICAgLmNvbC1sZy1hdXRvLmQtbm9uZS5kLWxnLWJsb2NrKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWE1LzMucG5nIikKICAgICAgLmNvbC1sZyhkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAucC00LmgtMTAwKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiNGM0YwRUE7IikKICAgICAgICAgIC5yb3cKICAgICAgICAgICAgLmNvbC1tZC1hdXRvLmQtbm9uZS5kLW1kLWJsb2NrCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hNS80LnN2ZyIpCiAgICAgICAgICAgIC5jb2wtbWQKICAgICAgICAgICAgICBwLm1iLTAgQ2FkYSBzaXN0ZW1hIHRpZW5lIGNvbXBvbmVudGVzIGVzcGVjw61maWNvcyBxdWUgcGVybWl0ZW4gbGEgZ2VuZXJhY2nDs24sIGNvbnRyb2wgeSB0cmFuc21pc2nDs24gZGUgZW5lcmfDrWEgcGFyYSByZWFsaXphciB0cmFiYWpvIG1lY8Ohbmljby4gTG9zIHNpc3RlbWFzIGhpZHLDoXVsaWNvcyB5IG5ldW3DoXRpY29zIGVzdMOhbiBjb21wdWVzdG9zIHBvciBlbGVtZW50b3MgY2xhdmUgcXVlIHBlcm1pdGVuIGxhIGdlbmVyYWNpw7NuLCBjb250cm9sIHkgdHJhbnNtaXNpw7NuIGRlIGVuZXJnw61hIHBhcmEgcmVhbGl6YXIgZWwgdHJhYmFqby4gQ2FkYSBjb21wb25lbnRlIGRlc2VtcGXDsWEgdW4gcGFwZWwgZXNwZWPDrWZpY28gZGVudHJvIGRlbCBzaXN0ZW1hIHkgc3UgY29ycmVjdGEgc2VsZWNjacOzbiBlIGluc3RhbGFjacOzbiBzb24gZnVuZGFtZW50YWxlcyBwYXJhIGVsIGZ1bmNpb25hbWllbnRvIGVmaWNpZW50ZSBkZSBsYSBhdXRvbWF0aXphY2nDs24uCiAgICAKICAgIC50aXR1bG8tc2V4dG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkby5tdC01KGRhdGEtYW9zPSJmYWRlLWRvd24iKQogICAgICBoNSBUYWJsYSAzLgogICAgICBzcGFuIENvbXBvbmVudGVzIGRlIGxvcyBzaXN0ZW1hcyBoaWRyw6F1bGljb3MgeSBuZXVtw6F0aWNvcy4KICAgIC50YWJsYS1hLmNvbG9yLWFjZW50by1ib3RvbmVzKGRhdGEtYW9zPSJmYWRlLXVwIikKICAgICAgdGFibGUKICAgICAgICBjYXB0aW9uLmZ3LW5vcm1hbCBGdWVudGU6IE9JVCwgMjAyNC4KICAgICAgICB0aGVhZChzdHlsZT0iYm9yZGVyOjAgIWltcG9ydGFudDsiKQogICAgICAgICAgdHIudGV4dC1jZW50ZXIoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6Izc4QjYyRTsiKQogICAgICAgICAgICB0aCBJbWFnZW4KICAgICAgICAgICAgdGggRWxlbWVudG8KICAgICAgICAgICAgdGggRGVmaW5pY2nDs24KICAgICAgICB0Ym9keS50ZXh0LWNlbnRlcgogICAgICAgICAgdHIoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I2ZmZjsiKQogICAgICAgICAgICB0ZChzdHlsZT0iYm9yZGVyOjA7Ym9yZGVyLXJpZ2h0OjFweCAjQUZBRkFGIHNvbGlkOyIpIAogICAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICAgIGltZy5kLWlubGluZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWE1LzUuc3ZnIiBzdHlsZT0ibWF4LXdpZHRoOjE3MHB4OyIpCiAgICAgICAgICAgIHRkKHN0eWxlPSJib3JkZXItcmlnaHQ6MXB4ICNBRkFGQUYgc29saWQ7IikgQm9tYmEgaGlkcsOhdWxpY2EgeSBjb21wcmVzb3IgbmV1bcOhdGljbwogICAgICAgICAgICB0ZChzdHlsZT0iYm9yZGVyOjA7IikgRW4gaGlkcsOhdWxpY2EsIGxhIGJvbWJhIHRyYW5zZm9ybWEgbGEgZW5lcmfDrWEgbWVjw6FuaWNhIGVuIHByZXNpw7NuIGRlbCBmbHVpZG8uIEVuIG5ldW3DoXRpY2EsIGVsIGNvbXByZXNvciBnZW5lcmEgZWwgYWlyZSBjb21wcmltaWRvIG5lY2VzYXJpbyBwYXJhIGVsIGZ1bmNpb25hbWllbnRvIGRlbCBzaXN0ZW1hLgogICAgICAgICAgdHIoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I0Y2RjZGNjsiKQogICAgICAgICAgICB0ZChzdHlsZT0iYm9yZGVyOjA7Ym9yZGVyLXJpZ2h0OjFweCAjQUZBRkFGIHNvbGlkOyIpIAogICAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICAgIGltZy5kLWlubGluZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWE1LzYuc3ZnIiBzdHlsZT0ibWF4LXdpZHRoOjE3MHB4OyIpCiAgICAgICAgICAgIHRkKHN0eWxlPSJib3JkZXItcmlnaHQ6MXB4ICNBRkFGQUYgc29saWQ7IikgIFbDoWx2dWxhcyBkZSBjb250cm9sCiAgICAgICAgICAgIHRkKHN0eWxlPSJib3JkZXI6MDsiKSBMYXMgdsOhbHZ1bGFzIHBlcm1pdGVuIGNvbnRyb2xhciBlbCBmbHVqbyB5IGxhIGRpcmVjY2nDs24gZGVsIGZsdWlkbyBlbiBhbWJvcyBzaXN0ZW1hcywgcmVndWxhbmRvIGxhIHZlbG9jaWRhZCB5IGxhIHByZXNpw7NuIGVuIGxvcyBhY3R1YWRvcmVzLiBFbnRyZSBlbGxhcyBzZSBlbmN1ZW50cmFuIGxhcyB2w6FsdnVsYXMgZGUgY29udHJvbCBkZSBwcmVzacOzbiwgZGUgY2F1ZGFsIHkgZGlyZWNjaW9uYWxlcy4KICAgICAgICAgIHRyKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7IikKICAgICAgICAgICAgdGQoc3R5bGU9ImJvcmRlcjowO2JvcmRlci1yaWdodDoxcHggI0FGQUZBRiBzb2xpZDsiKSAKICAgICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgICBpbWcuZC1pbmxpbmUoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hNS8xMy5wbmciIHN0eWxlPSJtYXgtd2lkdGg6MTcwcHg7IikKICAgICAgICAgICAgdGQoc3R5bGU9ImJvcmRlci1yaWdodDoxcHggI0FGQUZBRiBzb2xpZDsiKSBBY3R1YWRvcmVzIChjaWxpbmRyb3MgeSBtb3RvcmVzKQogICAgICAgICAgICB0ZChzdHlsZT0iYm9yZGVyOjA7IikgRXN0b3MgZGlzcG9zaXRpdm9zIGNvbnZpZXJ0ZW4gbGEgZW5lcmfDrWEgZGVsIGZsdWlkbyBlbiBtb3ZpbWllbnRvIGxpbmVhbCAoY2lsaW5kcm9zKSBvIHJvdGF0aXZvIChtb3RvcmVzKS4gTG9zIGFjdHVhZG9yZXMgc29uIGVsIGNvbXBvbmVudGUgcXVlIHJlYWxpemEgZWwgdHJhYmFqbyBmw61zaWNvIGVuIGVsIHNpc3RlbWEuCiAgICAgICAgICB0cihzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojRjZGNkY2OyIpCiAgICAgICAgICAgIHRkKHN0eWxlPSJib3JkZXI6MDtib3JkZXItcmlnaHQ6MXB4ICNBRkFGQUYgc29saWQ7IikgCiAgICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgICAgaW1nLmQtaW5saW5lKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTUvMTQuanBnIiBzdHlsZT0ibWF4LXdpZHRoOjE3MHB4OyIpCiAgICAgICAgICAgIHRkKHN0eWxlPSJib3JkZXItcmlnaHQ6MXB4ICNBRkFGQUYgc29saWQ7IikgIEZpbHRyb3MgeSBzZWNhZG9yZXMKICAgICAgICAgICAgdGQoc3R5bGU9ImJvcmRlcjowOyIpIExvcyBmaWx0cm9zIGVuIGhpZHLDoXVsaWNhIHkgbG9zIHNlY2Fkb3JlcyBlbiBuZXVtw6F0aWNhIHNvbiBlc2VuY2lhbGVzIHBhcmEgcmVtb3ZlciBpbXB1cmV6YXMgeSBodW1lZGFkLCBwcm90ZWdpZW5kbyBsb3MgY29tcG9uZW50ZXMgeSBhc2VndXJhbmRvIHVuYSBvcGVyYWNpw7NuIGVmaWNpZW50ZS4KICAgICAgICAgIHRyKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7IikKICAgICAgICAgICAgdGQoc3R5bGU9ImJvcmRlcjowO2JvcmRlci1yaWdodDoxcHggI0FGQUZBRiBzb2xpZDsiKSAKICAgICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgICBpbWcuZC1pbmxpbmUoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hNS8xNS5qcGciIHN0eWxlPSJtYXgtd2lkdGg6MTcwcHg7IikKICAgICAgICAgICAgdGQoc3R5bGU9ImJvcmRlci1yaWdodDoxcHggI0FGQUZBRiBzb2xpZDsiKSBBY3VtdWxhZG9yZXMgeSByZXNlcnZvcmlvcwogICAgICAgICAgICB0ZChzdHlsZT0iYm9yZGVyOjA7IikgRW4gaGlkcsOhdWxpY2EsIGxvcyBhY3VtdWxhZG9yZXMgYWxtYWNlbmFuIGVuZXJnw61hIGJham8gcHJlc2nDs24gcGFyYSBzdSB1c28gcG9zdGVyaW9yLCBtaWVudHJhcyBxdWUgbG9zIHJlc2Vydm9yaW9zIGNvbnRpZW5lbiBlbCBmbHVpZG8gcXVlIHNlcsOhIHJlY2lyY3VsYWRvIGVuIGVsIHNpc3RlbWEuCiAgICAKICAgIFNlcGFyYWRvcgoKICAgIC50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyI3RfNV8zIDUuMyBBcGxpY2FjaW9uZXMgZW4gbGEgYXV0b21hdGl6YWNpw7NuIGluZHVzdHJpYWwKICAgIAogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTG9zIHNpc3RlbWFzIGhpZHLDoXVsaWNvcyB5IG5ldW3DoXRpY29zIHRpZW5lbiBhcGxpY2FjaW9uZXMgZXNwZWPDrWZpY2FzIGVuIGxhIGF1dG9tYXRpemFjacOzbiBpbmR1c3RyaWFsIHF1ZSB2YXLDrWFuIHNlZ8O6biBsYXMgbmVjZXNpZGFkZXMgZGUgZnVlcnphLCBwcmVjaXNpw7NuIHkgdmVsb2NpZGFkIGRlIGxvcyBwcm9jZXNvcy4gRXN0b3Mgc2lzdGVtYXMgcHVlZGVuIGVuY29udHJhcnNlIGVuIGzDrW5lYXMgZGUgZW5zYW1ibGFqZSwgbcOhcXVpbmFzIGRlIGlueWVjY2nDs24gZGUgcGzDoXN0aWNvLCBzaXN0ZW1hcyBkZSBlbGV2YWNpw7NuIHkgZW4gbWVjYW5pc21vcyBkZSBzZWd1cmlkYWQuCgogICAgLmNvbnRfMV80Lm10LTUucHQtNC5wYi00LnBiLXhsLTUucHQteGwtNQogICAgICAudGFyamV0YS5iZy13aGl0ZS5wLTQucC1sZy01LnBiLWxnLTQKICAgICAgICBDYXJvdXNlbFJFRCh0aXBvPSJiIikKICAgICAgICAgIC5yb3cucHQtbGctNC5jb2wteGwtMTEubS1hdXRvCiAgICAgICAgICAgIC5jb2wtbGctNy5tYi00Lm1iLWxnLTAoc3R5bGU9InBsYWNlLXNlbGY6Y2VudGVyOyIpCiAgICAgICAgICAgICAgaDUgQXBsaWNhY2lvbmVzIGRlIGxhIGhpZHLDoXVsaWNhIAogICAgICAgICAgICAgIHAubXQtNCBMYSBoaWRyw6F1bGljYSBlcyBpZGVhbCBlbiBhcGxpY2FjaW9uZXMgcXVlIHJlcXVpZXJlbiBncmFuIGZ1ZXJ6YSB5IHByZWNpc2nDs24sIGNvbW8gcHJlbnNhcyBoaWRyw6F1bGljYXMsIG1hcXVpbmFyaWEgZGUgY29uc3RydWNjacOzbiAoZ3LDumFzLCBleGNhdmFkb3JhcykgeSBzaXN0ZW1hcyBkZSBlbGV2YWNpw7NuLiBTdSBjYXBhY2lkYWQgcGFyYSBtYW5lamFyIGNhcmdhcyBwZXNhZGFzIGhhY2UgcXVlIGVzdG9zIHNpc3RlbWFzIHNlYW4gaW5kaXNwZW5zYWJsZXMgZW4gaW5kdXN0cmlhcyBjb21vIGxhIGF1dG9tb3RyaXosIG1ldGFsw7pyZ2ljYSB5IGNvbnN0cnVjY2nDs24uCiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZS5tLWF1dG8uY29sLTEyLmNvbC1tZC04LmNvbC1sZy0xMgogICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTUvNy5wbmcnKQogICAgICAgICAgLnJvdy5wdC1sZy00LmNvbC14bC0xMS5tLWF1dG8KICAgICAgICAgICAgLmNvbC1sZy03Lm1iLTQubWItbGctMChzdHlsZT0icGxhY2Utc2VsZjpjZW50ZXI7IikKICAgICAgICAgICAgICBoNSBBcGxpY2FjaW9uZXMgZGUgbGEgbmV1bcOhdGljYQogICAgICAgICAgICAgIHAubXQtNCBMYSBuZXVtw6F0aWNhIGVzIGFkZWN1YWRhIHBhcmEgYXBsaWNhY2lvbmVzIHF1ZSByZXF1aWVyZW4gbW92aW1pZW50b3MgcsOhcGlkb3MgeSByZXBldGl0aXZvcywgY29tbyBlbiBsw61uZWFzIGRlIGVuc2FtYmxhamUsIGhlcnJhbWllbnRhcyBuZXVtw6F0aWNhcyB5IHNpc3RlbWFzIGRlIGVtYmFsYWplLiBFcyBjb23Dum4gZW4gaW5kdXN0cmlhcyBxdWUgbmVjZXNpdGFuIHJlYWxpemFyIG9wZXJhY2lvbmVzIGxpZ2VyYXMgcGVybyByZXBldGl0aXZhcywgY29tbyBsYSBtYW51ZmFjdHVyYSBkZSBhbGltZW50b3MsIGZhcm1hY8OpdXRpY2EgeSBlbXBhcXVlcy4KICAgICAgICAgICAgLmNvbC1sZy01CiAgICAgICAgICAgICAgZmlndXJlLm0tYXV0by5jb2wtMTIuY29sLW1kLTguY29sLWxnLTEyCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hNS84LnBuZycpCiAgICAgICAgICAucm93LnB0LWxnLTQuY29sLXhsLTExLm0tYXV0bwogICAgICAgICAgICAuY29sLWxnLTcubWItNC5tYi1sZy0wKHN0eWxlPSJwbGFjZS1zZWxmOmNlbnRlcjsiKQogICAgICAgICAgICAgIGg1IFNpc3RlbWFzIGNvbWJpbmFkb3MKICAgICAgICAgICAgICBwLm10LTQgRW4gYWxndW5hcyBhcGxpY2FjaW9uZXMgaW5kdXN0cmlhbGVzLCBsb3Mgc2lzdGVtYXMgaGlkcsOhdWxpY29zIHkgbmV1bcOhdGljb3Mgc2UgY29tYmluYW4gcGFyYSBhcHJvdmVjaGFyIGxhcyB2ZW50YWphcyBkZSBhbWJvcy4gUG9yIGVqZW1wbG8sIGVuIG1hcXVpbmFyaWEgYWdyw61jb2xhLCB1biBzaXN0ZW1hIGhpZHLDoXVsaWNvIHB1ZWRlIG1hbmVqYXIgbGEgY2FyZ2EgbWllbnRyYXMgcXVlIHVuIHNpc3RlbWEgbmV1bcOhdGljbyBjb250cm9sYSBsYSBkb3NpZmljYWNpw7NuIGRlIHNlbWlsbGFzIG8gZmVydGlsaXphbnRlcywgb3B0aW1pemFuZG8gZWwgcHJvY2Vzby4KICAgICAgICAgICAgLmNvbC1sZy01CiAgICAgICAgICAgICAgZmlndXJlLm0tYXV0by5jb2wtMTIuY29sLW1kLTguY29sLWxnLTEyCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hNS85LnBuZycpCgogICAgU2VwYXJhZG9yCgogICAgLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIjdF81XzQgNS40IENvbnRyb2wgZGUgc2lzdGVtYXMgaGlkcsOhdWxpY29zIHkgbmV1bcOhdGljb3MKICAgIAogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRWwgY29udHJvbCBkZSBsb3Mgc2lzdGVtYXMgaGlkcsOhdWxpY29zIHkgbmV1bcOhdGljb3MgZXMgZXNlbmNpYWwgcGFyYSBsYSBhdXRvbWF0aXphY2nDs24geSBzaW5jcm9uaXphY2nDs24gZGUgc3VzIGZ1bmNpb25lcyBlbiBwcm9jZXNvcyBpbmR1c3RyaWFsZXMuIExhcyB0w6ljbmljYXMgZGUgY29udHJvbCBwdWVkZW4gdmFyaWFyIGRlc2RlIHNpc3RlbWFzIGRlIGVuY2VuZGlkbyB5IGFwYWdhZG8gc2ltcGxlcyBoYXN0YSBjb25maWd1cmFjaW9uZXMgYXZhbnphZGFzIHF1ZSB1dGlsaXphbiBjb250cm9sYWRvcmVzIHByb2dyYW1hYmxlcy4KCiAgICAucm93Lm10LTQKICAgICAgLmNvbC1sZy1hdXRvLmQtbm9uZS5kLWxnLWJsb2NrKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWE1LzEwLnBuZyIpCiAgICAgIC5jb2wtbGcoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgLmgtMTAwLnAtMy5wLWxnLTQuZC1mbGV4LmFsaWduLWNvbnRlbnQtY2VudGVyLmZsZXgtd3JhcChzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojNzhCNjJFO2JvcmRlci1yYWRpdXM6MTBweDsiKQogICAgICAgICAgdWwubGlzdGEtdWwubWItMAogICAgICAgICAgICBsaS5kLWZsZXguYmctd2hpdGUucC0yKHN0eWxlPSJib3JkZXItcmFkaXVzOjRweDsiKQogICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6Izc4QjYyRTsiKQogICAgICAgICAgICAgIHNwYW4gI1tzdHJvbmcgQ29udHJvbCB0b2RvLW5hZGEgKE9uL09mZik6XSBlcyBlbCBtw6l0b2RvIGRlIGNvbnRyb2wgbcOhcyBiw6FzaWNvLCBlbiBlbCBxdWUgbGFzIHbDoWx2dWxhcyBhYnJlbiBvIGNpZXJyYW4gZWwgcGFzbyBkZWwgZmx1aWRvIHNlZ8O6biB1bmEgc2XDsWFsIGRlIGVudHJhZGEuIEVzIGFkZWN1YWRvIHBhcmEgYXBsaWNhY2lvbmVzIHNpbXBsZXMgcXVlIG5vIHJlcXVpZXJlbiBhanVzdGVzIGNvbnRpbnVvcyBkZSBsYSBwcmVzacOzbiBvIGNhdWRhbC4KICAgICAgICAgICAgbGkuZC1mbGV4LmJnLXdoaXRlLnAtMi5tYi0wKHN0eWxlPSJib3JkZXItcmFkaXVzOjRweDsiKQogICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6Izc4QjYyRTsiKQogICAgICAgICAgICAgIHNwYW4gI1tzdHJvbmcgQ29udHJvbCBwcm9wb3JjaW9uYWw6XSBsYXMgdsOhbHZ1bGFzIHByb3BvcmNpb25hbGVzIHBlcm1pdGVuIHVuIGFqdXN0ZSBncmFkdWFsIGRlIGxhIHByZXNpw7NuIHkgY2F1ZGFsLCBoYWNpZW5kbyBxdWUgbG9zIGFjdHVhZG9yZXMgcmVzcG9uZGFuIHN1YXZlbWVudGUgeSBkZSBmb3JtYSBwcmVjaXNhLiBFc3RlIGNvbnRyb2wgZXMgaW1wb3J0YW50ZSBlbiBhcGxpY2FjaW9uZXMgcXVlIHJlcXVpZXJlbiBwcmVjaXNpw7NuLCBjb21vIGVsIHBvc2ljaW9uYW1pZW50byBkZSBjaWxpbmRyb3MgZW4gbWFxdWluYXJpYS4KCiAgICAucm93Lm10LTQKICAgICAgLmNvbC1sZyhkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgLmgtMTAwLnAtMy5wLWxnLTQuZC1mbGV4LmFsaWduLWNvbnRlbnQtY2VudGVyLmZsZXgtd3JhcChzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojMDFCOUQxO2JvcmRlci1yYWRpdXM6MTBweDsiKQogICAgICAgICAgdWwubGlzdGEtdWwubWItMAogICAgICAgICAgICBsaS5kLWZsZXguYmctd2hpdGUucC0yKHN0eWxlPSJib3JkZXItcmFkaXVzOjRweDsiKQogICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6Izc4QjYyRTsiKQogICAgICAgICAgICAgIHNwYW4gI1tzdHJvbmcgQ29udHJvbCBtZWRpYW50ZSBQTENzOl0gbG9zIGNvbnRyb2xhZG9yZXMgbMOzZ2ljb3MgcHJvZ3JhbWFibGVzIChQTENzKSBzZSB1dGlsaXphbiBwYXJhIGdlc3Rpb25hciBkZSBmb3JtYSBhdXRvbcOhdGljYSBlbCBmdW5jaW9uYW1pZW50byBkZSB2w6FsdnVsYXMgeSBhY3R1YWRvcmVzIGVuIHNpc3RlbWFzIGhpZHLDoXVsaWNvcyB5IG5ldW3DoXRpY29zLiBMb3MgUExDcyBwZXJtaXRlbiBpbnRlZ3JhciBzZW5zb3JlcyBkZSBwcmVzacOzbiB5IGNhdWRhbCwgeSBhanVzdGFyIGxhcyBjb25kaWNpb25lcyBkZSBvcGVyYWNpw7NuIGVuIHRpZW1wbyByZWFsIHNlZ8O6biBsYXMgbmVjZXNpZGFkZXMgZGVsIHByb2Nlc28uCiAgICAgICAgICAgIGxpLmQtZmxleC5iZy13aGl0ZS5wLTIubWItMChzdHlsZT0iYm9yZGVyLXJhZGl1czo0cHg7IikKICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiM3OEI2MkU7IikKICAgICAgICAgICAgICBzcGFuICNbc3Ryb25nIFByb3RvY29sb3MgZGUgY29tdW5pY2FjacOzbiBlbiByZWRlcyBpbmR1c3RyaWFsZXM6XSBwYXJhIGFwbGljYWNpb25lcyBxdWUgcmVxdWllcmVuIG1vbml0b3JlbyB5IGNvbnRyb2wgcmVtb3RvLCBsb3MgcHJvdG9jb2xvcyBkZSBjb211bmljYWNpw7NuIGNvbW8gTW9kYnVzIHkgUHJvZmlidXMgcGVybWl0ZW4gaW50ZWdyYXIgbG9zIHNpc3RlbWFzIGhpZHLDoXVsaWNvcyB5IG5ldW3DoXRpY29zIGVuIHJlZGVzIGluZHVzdHJpYWxlcywgZmFjaWxpdGFuZG8gbGEgc3VwZXJ2aXNpw7NuIGNlbnRyYWxpemFkYSB5IGxhIGVmaWNpZW5jaWEgZW4gZWwgY29udHJvbCBkZSBwcm9jZXNvcy4KICAgICAgLmNvbC1sZy1hdXRvLmQtbm9uZS5kLWxnLWJsb2NrKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTUvMTEucG5nIikKICAgIAogICAgLnRpdHVsby1zZXh0by5jb2xvci1hY2VudG8tY29udGVuaWRvLm10LTUoZGF0YS1hb3M9ImZhZGUtZG93biIpCiAgICAgIGg1IEZpZ3VyYSAyLgogICAgICBzcGFuIExhIGhpZHLDoXVsaWNhIHkgbmV1bcOhdGljYSBlbiBsYSBhdXRvbWF0aXphY2nDs24gaW5kdXN0cmlhbC4KICAgIC5wLTMucC1sZy00LnB0LXhsLTUucGIteGwtNShzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojRUFFRkY0OyIpCiAgICAgIGZpZ3VyZShkYXRhLWFvcz0iZmFkZS11cCIpCiAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTUvMTIuc3ZnIiBhbHQ9IkxhIEZpZ3VyYSAyIHNlIGRlbm9taW5hIMKrTGEgaGlkcsOhdWxpY2EgeSBuZXVtw6F0aWNhIGVuIGxhIGF1dG9tYXRpemFjacOzbiBpbmR1c3RyaWFswrsuIEVzdGUgbWFwYSBjb25jZXB0dWFsIGlsdXN0cmEgc2VpcyDDoXJlYXMgcHJpbmNpcGFsZXM6IGZ1bmRhbWVudG9zIGRlIGhpZHLDoXVsaWNhIGNvbiBsw61xdWlkb3MsIHVzbyBkZSBnYXNlcyBlbiBuZXVtw6F0aWNhLCBhcGxpY2FjaW9uZXMgaW5kdXN0cmlhbGVzIChpbmNsdXllbmRvIHNpc3RlbWFzIGRlIGVsZXZhY2nDs24geSBoZXJyYW1pZW50YXMpLCBwcmluY2lwaW9zIGZ1bmRhbWVudGFsZXMsIGV4cGxvcmFjacOzbiBkZSBhcGxpY2FjaW9uZXMgY29tdW5lcyB5IGFjdGl2aWRhZGVzIHByw6FjdGljYXMgcGFyYSBlc3R1ZGlhbnRlcy4gQ2FkYSByYW1hIGluY2x1eWUgc3VidGVtYXMgZXNwZWPDrWZpY29zIHF1ZSBkZXRhbGxhbiBhc3BlY3RvcyB5IHVzb3MgZGUgZXN0b3Mgc2lzdGVtYXMuIFBhcmEgdmVyIG1lam9yIGVsIGVzcXVlbWEgYWNjZWRlciBhOiBodHRwczovL3d3dy5taW5kb21vLmNvbS9taW5kbWFwLzViMDM5MDc2Y2Y4ZjQxNmM5MTVkMWZkMTQzYjMxMmUxIikKICAgIGZpZ2NhcHRpb24ubXQtMi5mdy1ub3JtYWwgRnVlbnRlOiBPSVQsIDIwMjQuCgogICAgcC5tdC00KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgTGEgY29tcHJlbnNpw7NuIGRlIGxvcyBzaXN0ZW1hcyBoaWRyw6F1bGljb3MgeSBuZXVtw6F0aWNvcyBlcyBmdW5kYW1lbnRhbCBwYXJhIGxhIGF1dG9tYXRpemFjacOzbiBpbmR1c3RyaWFsLCB5YSBxdWUgcGVybWl0ZW4gcmVhbGl6YXIgbW92aW1pZW50b3MgeSB0cmFiYWpvcyBtZWPDoW5pY29zIGRlIG1hbmVyYSBwcmVjaXNhIHkgY29udHJvbGFkYS4gU2UgcmVjb21pZW5kYSBwYXJhIHByb2Z1bmRpemFyIGNvbnN1bHRhciBlbCBzaWd1aWVudGUgbWF0ZXJpYWw6CgogICAgLnJvdy5tdC00Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgLmNvbC1sZy5tYi00Lm1iLWxnLTAuY29sLW1kLTYoZGF0YS1hb3M9ImZhZGUtdXAiKQogICAgICAgIGEuYW5leG8ubXMtMChocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWpSNG9KVUloM2p3IiB0YXJnZXQ9Il9ibGFuayIpCiAgICAgICAgICAuYW5leG9fX2ljb25vCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2J1bGxldHMvaWNvbm8tdmlkZW8uc3ZnIikKICAgICAgICAgIC5hbmV4b19fdGV4dG8KICAgICAgICAgICAgcC5mdy1ub3JtYWwgI1tzdHJvbmcgRW5sYWNlIHZpZGVvLl0g4oCcUHJpbmNpcGxlcyBvZiBIeWRyYXVsaWMgYW5kIFBuZXVtYXRpYyBTeXN0ZW1z4oCdLgogICAgICAuY29sLWxnLmNvbC1tZC02KGRhdGEtYW9zPSJmYWRlLXVwIikKICAgICAgICBhLmFuZXhvLm1zLTAoaHJlZj0iaHR0cHM6Ly93d3cuZmVzdG8uY29tL21hbnVhbGVzL2hpZHJhdWxpY2FfbmV1bWF0aWNhLnBkZiIgdGFyZ2V0PSJfYmxhbmsiKQogICAgICAgICAgLmFuZXhvX19pY29ubwogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9idWxsZXRzL2ljb25vLWxpbmsuc3ZnIikKICAgICAgICAgIC5hbmV4b19fdGV4dG8KICAgICAgICAgICAgcC5mdy1ub3JtYWwgI1tzdHJvbmcgRW5sYWNlIHdlYi5dIE1hbnVhbCBCw6FzaWNvIGRlIEhpZHLDoXVsaWNhIHkgTmV1bcOhdGljYS4KICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAK"},null]}